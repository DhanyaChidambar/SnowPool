<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($window,$http,$rootScope,$scope,spUtil) {
	/* widget controller */


	var c = this;
	c.data.showNewRide = false;
	$rootScope.$on('showNewRidePage',function(event,data){
		c.data.showNewRide=data;
		c.data.showrides = false;

	});

	c.data.commute_type='To work';
	c.data.mode='car';
	c.selectedMode = function(mode){
		c.data.mode=mode;
	}
	c.data.newride={};
	c.data.newride.office_lng='78.38027';
	c.data.newride.office_lat='17.43324';
	c.data.newride.office_placeid='ChIJ_____1aRyzsRnBaaX7laxu8';

	$window.initMap = function (){
		//alert("inside");
		var input = document.getElementById('location');

		var autocomplete = new google.maps.places.Autocomplete(input);
		google.maps.event.addListener(autocomplete, 'place_changed', function () {
			var place = autocomplete.getPlace();
			//alert(place.place_id);
			c.data.newride.loc_placeid=place.place_id;
			c.data.newride.loc_lng=place.geometry.location.lng();
			c.data.newride.loc_lat=place.geometry.location.lat();
			//alert(place.address_components[0].long_name+" "+place.geometry.location.lng()+" "+place.geometry.location.lat());
			//c.getPolyLine(place.place_id);

		});
	}



	c.submit = function(){

		if(c.data.mode=='rider'){

			c.server.get({
				action: "searchRides",
				data:c.data.newride,
				commute:c.data.commute_type

			}).then(function(r) {
				c.data.showrides = true;
				c.data.newride={};
				c.data.rides=r.data.rides;
			});
		}else{
			console.log(c.data.newride);
			c.data.newride.mode=c.data.mode;
			c.server.get({
				action: "offerRide",
				data:c.data.newride,
				commute:c.data.commute_type

			}).then(function(r) {

				c.data.newride={};
				spUtil.addInfoMessage(" Ride offered successfully")
			});
		}
	}

	c.capacitychange = function(){
		if(c.data.newride.capacity<1 || c.data.newride.capacity>6){
			alert("invalid capacity");
			c.data.newride.capacity=1;
		}
	}
};]]></client_script>
        <controller_as>c</controller_as>
        <css>body {
  background: #f5f5f5;
}
.heading {
  text-align: center;
  font-size: 40px; 
  color: #777B7E;
  margin: 15px 8px 30px 8px;
}
.rounded-lg {
  border-radius: 1rem;
}

.nav-pills &gt; li.active &gt; a, .nav-pills &gt; li.active &gt; a:hover, .nav-pills &gt; li.active &gt; a:focus {
    color: #fff;
    background-color: red;
}
a{
 color:red;
}
.heading {
  text-align: center;
  font-size: 40px; 
  color: #A9A9A9;
  margin: 15px 8px 30px 8px;
}
.rides-card {
  box-shadow: 0 4px 4px 0 rgba(0,0,0,0.2);
  transition: 0.3s;
  padding: 4px;
  margin-bottom: 10px;
}

.rides-card:hover {
  box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
}

.ride-details {
  padding: 8px;
}

.float-right {
  float: right;
}

.ride-cancel {
  width: 100%;
  background-color: #D30000;
  color: #ffffff;
  border-radius: 5px;
  text-align: center;
  border: none;
  padding: 5px;
}

.ride-label {
  display: block;
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 2px;
}

.ride-label-2 {
  display: inline;
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 2px;
}

.ride-value {
  font-weight: normal;
}

.ride-value-2 {
  font-weight: bold;
  font-size: 16px;
}

.label-details {
  width: 100%;
  margin-bottom: 8px;
}

.car-icon a {
  width: 100%;
  height: 100%;
  display: block;
}

.ride-status {
  margin-bottom: 8px; 
}

.ride-status-requested {
  width: 25%;
  color: #FFFFFF;
  background-color: #A9A9A9;
  text-align: center;
  border-radius: 4px;
  padding: 2px;
}

.ride-checkin {
  width: 100%;
  border: 1px solid #A9A9A9;
  border-radius: 5px;
  padding: 8px;
  margin: 4px;
  background-color: #E8E8E8;
  color: #D30000;
  font-size: 14px;
  box-shadow: 0 4px 4px 0 rgba(0,0,0,0.2);
}

.ride-checkin:hover {
  box-shadow: 0 8px 8px 0 rgba(0,0,0,0.2);
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>new_ride</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>New Ride</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */
	if (input && input.action) {
		if(input.action=='offerRide'){
			var newride=input.data;
			var commute=input.commute;
			var ridegr=new GlideRecord('x_snc_snow_pool_ride');
			if(commute=='To work'){
				ridegr.setValue('source',newride.loc_lat+","+newride.loc_lng+","+newride.loc_placeid);
				ridegr.setValue('destination',newride.office_lat+","+newride.office_lng+","+newride.office_placeid);	
			}else{
				ridegr.setValue('source',newride.office_lat+","+newride.office_lng+","+newride.office_placeid);
				ridegr.setValue('destination',newride.loc_lat+","+newride.loc_lng+","+newride.loc_placeid);
			}
			ridegr.setValue('capacity',newride.capacity);
			ridegr.setValue('mode',newride.mode);
			console.log("user" +gs.getUser().getID());
			ridegr.setValue('ride_giver',gs.getUser().getID());
			ridegr.setValue('time',newride.datetime);
			ridegr.setValue('vehicle_no',newride.vnumber);
			ridegr.setValue('vehicle_color',newride.vcolor);
			ridegr.setValue('vehicle_model',newride.vmodel);
			ridegr.insert();
		}
		else if(input.action=='searchRides'){
			//17.43324,78.38027
			data.rides=[];
			
			var ridegr=new GlideRecord('x_snc_snow_pool_ride');
			if(input.commute=='To work'){
			ridegr.addQuery('destinationSTARTSWITHServiceNow');
			}else{
				ridegr.addQuery('sourceSTARTSWITHServiceNow');
			}
			ridegr.query();
			console.log(ridegr.getRowCount())
			while(ridegr.next()){
				var ride={};
				ride.source=ridegr.getValue('source');
				ride.destination=ridegr.getValue('destination');
				ride.time=ridegr.getValue('time');
				ride.capacity=ridegr.getValue('capacity');
				data.rides.push(ride);
			}
			//if(input.commute=='To work'){
			//	var ridegr=new GlideRecord('x_snc_snow_pool_ride');
				//timeBETWEENjavascript:gs.beginningOfLast30Minutes()@javascript:gs.endOfCurrentHour()
				//ridegr.addQuery('destinationSTARTSWITH17.43324,78.38027');
				//ridegr.query();
				//console.log(ridegr.getRowCount())
				//while(ridegr.next()){
					//var polyLines= getPolyLine(ridegr.getValue('source').split(',')[2],input.data.office_placeid);
					//var closestPolyLine=getClosestPolyline(input.data.loc_lat,input.data.loc_lng,polyLines);
					//if(closestPolyLine.distance<1){
						//var address = getReverseGeocodingData(closestPolyLine.lat(),closestPolyLine.lng());
						//console.log(address);
					//}
				//}

			//}
			//else{
				//var ridegr=new GlideRecord('x_snc_snow_pool_ride');
				//ridegr.addQuery('sourceSTARTSWITH17.43324,78.38027^timeBETWEENjavascript:gs.beginningOfLast30Minutes()@javascript:gs.endOfCurrentHour()');
				//ridegr.query();
				//while(ridegr.next()){
					//var polyLines= getPolyLine(input.data.office_placeid,ridegr.getValue('destination').split(',')[2]);
					//var closestPolyLine=getClosestPolyline(input.data.loc_lat,input.data.loc_lng,polyLines);
					//if(closestPolyLine.distance<1){
					//	var address = getReverseGeocodingData(closestPolyLine.lat(),closestPolyLine.lng());
						//console.log(address);
					//}
				//}
			//}
		}
	}

	function getPolyLine(source,destination){
		var directionsService = new google.maps.DirectionsService();
		var request = {
			origin: {
				'placeId':source},
			destination: {'placeId':destiantion},
			travelMode: 'DRIVING'
		};
		directionsService.route(request, function(result, status) {
			if (status == 'OK') {
				var polyline = result.routes[0].overview_polyline;
				//var encoded_data = 'qikrIeshwu@WOKEIAIBGN?RAj@@f@?RGVO`NOhOSvQSdTUxUUbVUhVCdCEfC{@rUe@`LCt@KjDC`@NPfBl@nA\dH`@nFTh@BdDVPBb@LNJLNHPLn@B\NFNAlB_@^EjAKnAArABjIx@fGr@jG`AtHhAlIrArJxAvKbBhLfBnLdBhLjBxLfB|LnBxLjB`LbBlLdBfL~@hKv@lKn@vKx@lK\|Jd@dADfO[lL]pLWrLY~L_@~LWlABtHx@xOzEjAf@vCxAlCjBjCfC`CxChFrJfBrEzA`FxG~XtEvSlElRZvAXhAtApEDNDHHDLAFSFUFMLMLUDKBO@OB_@?Q?YC[GUOg@I_@COUy@M[MKMG?OEQAOCVPoALsA@QHa@JIDSKO';

				var decode = google.maps.geometry.encoding.decodePath(polyline);
				return decode;	
			}
		});
	}

	function getClosestPolyline(requestLat,requestLng, decode){
		var currMinDist = 5000;
		var closestPolyline;
		for (var i = 0; i < decode.length; i++) {
			var pathLat = decode[i].lat();
			var pathLng = decode[i].lng();
			var distance = getDistanceFromLatLonInKm(requestLat, requestLng, pathLat, pathLng);
			if(distance<currMinDist){
				currMinDist = distance;
				closestPolyline = decode[i];
			}
		}
		closestPolyline.distance=currMinDist;
		return closestPolyline;
	}
	function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
		var R = 6371; // Radius of the earth in km
		var dLat = deg2rad(lat2 - lat1);  // deg2rad below
		var dLon = deg2rad(lon2 - lon1);
		var a =
				Math.sin(dLat / 2) * Math.sin(dLat / 2) +
				Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
				Math.sin(dLon / 2) * Math.sin(dLon / 2)
		;
		var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
		var d = R * c; // Distance in km
		return d;
	}
	function deg2rad(deg) {
		return deg * (Math.PI / 180)
	}
	function insideRange(requestCoordinate, decode, range) {
		var requestLat = requestCoordinate.lat();
		var requestLng = requestCoordinate.lng();
		for (var i = 0; i < decode.length; i++) {
			var pathLat = decode[i].lat();
			var pathLng = decode[i].lng();
			var distance = getDistanceFromLatLonInKm(requestLat, requestLng, pathLat, pathLng);
			// console.log("The distance is " + distance);
			if (distance <= range) return true;
		}
		return false;
	}
	function getReverseGeocodingData(lat, lng) {
		var latlng = new google.maps.LatLng(lat, lng);
		// This is making the Geocode request
		var geocoder = new google.maps.Geocoder();
		//geocoder.geocode({ 'latLng': latlng }).then(function(results, status)
		//  if (status !== google.maps.GeocoderStatus.OK) {
		//    alert(status);
		//}
		// This is checking to see if the Geoeode Status is OK before proceeding
		//if (status == google.maps.GeocoderStatus.OK) {
		//  console.log(results);
		//var address = (results[0].formatted_address);
		//return address;
		//}
		//});
	}
})();

]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>dhanya.c@snc</sys_created_by>
        <sys_created_on>2022-11-15 16:54:34</sys_created_on>
        <sys_id>b5c559f3974b9110b5357f871153afd2</sys_id>
        <sys_mod_count>92</sys_mod_count>
        <sys_name>New Ride</sys_name>
        <sys_package display_value="SNow Pool" source="x_snc_snow_pool">09d24fe397c79110b5357f871153afec</sys_package>
        <sys_policy/>
        <sys_scope display_value="SNow Pool">09d24fe397c79110b5357f871153afec</sys_scope>
        <sys_update_name>sp_widget_b5c559f3974b9110b5357f871153afd2</sys_update_name>
        <sys_updated_by>snow.pool</sys_updated_by>
        <sys_updated_on>2022-11-16 09:04:02</sys_updated_on>
        <template><![CDATA[
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCUQutQfSnUMobCk8us9UIdCVF8WgoWcFk&callback=initMap&libraries=places,geometry&v=weekly"></script>

<div class="container" ng-show="c.data.showNewRide">
  <div class="heading">New Ride</div>
  <div class="row" ng-if="!c.data.showrides">
    <div class="col-lg-7 mx-auto">
      <div class="bg-white rounded-lg shadow-sm">
        <!-- Credit card form tabs -->
        <ul role="tablist" class="nav bg-light nav-pills rounded-pill nav-fill">
          <li class="nav-item active">
            <a data-toggle="pill" href="#nav-tab-card" class="nav-link active rounded-pill" ng-click="c.selectedMode('car')">
              <i class="fa fa-car"> Car</i>
            </a>
          </li>
          <li class="nav-item">
            <a data-toggle="pill" href="#nav-tab-card" class="nav-link rounded-pill" ng-click="c.selectedMode('bike')">
              <i class="fa fa-motorcycle"> Bike</i>
            </a>
          </li>
          <li class="nav-item">
            <a data-toggle="pill" href="#nav-tab-card" class="nav-link rounded-pill" ng-click="c.selectedMode('rider')">

              <i class="fa fa-user"> Rider</i>
            </a>
          </li>

        </ul>
        <!-- End -->


        <!-- Credit card form content -->
        <div class="tab-content">

          <!-- credit card info-->
          <div id="nav-tab-card" class="tab-pane active">

            <form role="form">
              <label class="radio-inline">
                <input type="radio" name="towork" id="toworkRadio" ng-model="c.data.commute_type" value="To work" ng-checked="true"> To work
              </label>
              <label class="radio-inline">
                <input type="radio" name="fromwork" id="fromworkRadio" ng-model="c.data.commute_type" value="From work"> From work
              </label>
              <br/><br/>

              <div class="form-group" >
                <label for="source" ng-if="c.data.commute_type=='To work'">Source</label>
                 <label for="destination" ng-if="c.data.commute_type=='From work'">Destination</label>
                <input type="text" id="location" name="location" required class="form-control">
              </div>
              
              <div class="form-group">
                <label for="dateTime">When</label>
                <div>
                  <input type="datetime-local" name="ride date" ng-model="c.data.newride.datetime" class="col-md-6" required>
                </div>
              </div>
              <br/>
              <div class="form-group" ng-if="c.data.mode=='car'">
                <label for="capacity">Capacity</label>
                <div class="input-group">
                  <input type="number" name="destination" ng-model="c.data.newride.capacity" class="form-control" required ng-change="c.capacitychange()">

                </div>
              </div>
              <br/>
              
              <div id="vehicle-details" class="form-group" ng-if="c.data.mode!='rider'">
                <label> <strong>Vehicle details</strong></label><br/>
                <label> Vehicle number</label>
                 <input type="text" id="vehicleNumber" name="vehicleNumber" ng-model="c.data.newride.vnumber" required class="form-control">
                 <label> Vehicle color</label>
                <input type="text" id="vehicleColor" name="vehicleColor" ng-model="c.data.newride.vcolor" required class="form-control">
                 <label> Vehicle model</label>
                 <input type="text" id="vehicleModel" name="vehicleModel" ng-model="c.data.newride.vmodel" required class="form-control">
              </div>
              <div class="form-group">
                <button type="button" class="btn btn-danger btn-block rounded-pill shadow-sm" ng-click="c.submit()"> 
                <label ng-if="c.data.mode=='rider'">Search Rides</label>  
                <label ng-if="c.data.mode=='car'||c.data.mode=='bike'">Offer Ride</label>  
                </button>
              </div>
              
            </form>

          </div>
          <!-- End -->
        </div>
        <!-- End -->

      </div>
    </div>
  </div>
    <div class="row" ng-if="c.data.showrides">
   <div class="rides-card" ng-repeat="item in c.data.rides">
    <div class="ride-details">
      <div class="float-right">
        <input type="button" class="ride-cancel" value="Request">
      </div>
      <div class="label-details">
        <label class="ride-label">Start</label>
        <span class="ride-value">{{item.source}}</span>
      </div>
      <div class="label-details">
        <label class="ride-label">End</label>
        <span class="ride-value">{{item.destination}}</span>
      </div>
      <div class="label-details">
        <label class="ride-label">Start Time</label>
        <span class="ride-value">{{item.time}}</span>
      </div>
      <div class="label-details">
        <label class="ride-label-2">Seats available : </label>
        <span class="ride-value-2">{{item.capacity}}</span>
      </div>
    </div>
  </div>
  </div>  
</div>]]></template>
    </sp_widget>
</record_update>
